생활코딩 정리(JAVA)

2023.02.02.화

O interface: 문법과 개념

인터페이스
-abstract, final과 함께 대표적인 규제
-역할: 어떤 객체(클래스)가 있고 그 객체가 특정한 인터페이스를 사용한다면 그 객체는 반드시 인터페이스의 메소드들을 구현하도록 강제한다.
만약 인터페이스에서 강제하고 있는 메소드를 구현하지 않으면 컴파일 안됨

예제) 
interface I{
  public void z( );
}
class A implements I {
   public void z(){ }
}
의미) 특정한 클래스(A)를 특정한 인터페이스(I)에 결합시키면 그 클래스를 정의할 때, 인터페이스 안에 정의되어 있는 메소드를 반드시 구현하도록 강제한다./클래스 A는 인터페이스 I를 구현한다.


O interface: 사용하는 이유

만약 계산기클래스와 사용클래스를 동시에 제작할 때, 계산기클래스를 만드는 동안 사용클래스를 안만들고 있을 수는 없다
->사용클래스 제작 쪽에서는 calculatorDummy라는 가짜 클래스를 만들고 이것을 이용해 나머지 사용로직을 제작한다
->그런데 더미클래스는 setOprands의 변수를 임의로 세 개 넣었는데, 제작된 계산기클래스를 받아보니 setOprands의 변수가 두 개라면?? ==>수정하기 힘든 오류 발생
->이러한 소통 문제를 예방하고자 자바기능으로 약속을 미리 지정해둔다 ==>이것이 인터페이스

계산클래스 제작자와 사용클래스 제작자가 합의하여 interface Calculatable을 만든다
->class CalculatorDummy implements Calculatable로 Calculatable라는 인터페이스를 implements 시킨다(구현한다)
->이렇게 하면 Calculatable에 없는 다른 메소드/멤버를 작성할 경우 아예 컴파일 되지 않기 떄문에 문제 예방
->계산클래스 제작자가 class Calculator를 완성하면 사용클래스 제작자는 더미 자리를 Calculator로 바꿔넣으면 됨

O interface: 규칙들

-인터페이스의 멤버(메소드,필드)는 반드시 public
-하나의 클래스가 여러개의 인터페이스를 구현 할 수 있다. class A implements I1,I2 { }
  ->A클래스는 반드시 I1과 I2에 있는 메소드를 모두 구현해야한다.
-인터페이스도 상속이 가능하다.
  -> interface I4 extends I3 이런 식으로..
  ->class B implements I4를 할 경우, class B는 I3(부모)과 I4(자식)에 있는 메소드를 모두 구현해야한다.
-abstract vs interface
  ab: 일반적인 클래스. 구체적인 로직을 가진 메소드나 필드를 가지고 있을 수 있다.
  in: 구체적인 로직을 가지면 안되고 반드시 본체가 없는 메소드들만을 가져야한다.

2023.02.05.일

O 메소드와 다형성
-다형성 : 하나의 메소드나 클래스가 있을 때 이것들이 다양한 방법으로 동작하는 것을 의미

O 클래스와 다형성
class A{
    public String x(){return "x";}
}
class B extends A{
    public String y(){return "y";}
}
public class Poly {
    public static void main(String[] args) {
	A obj = new B();   ->B를 인스턴스화 한 obj라는 변수는 A행세를 하고 있음
			obj라는 변수는 실질적으로는 클래스B를 인스턴스화 시키고 있지만(담고 있지만) 클래스 A 행세
	obj.x();    ->실행됨. x는 부모클래스 A에 존재하므로
	obj.y();    ->obj는 클래스A 행세를 하고 있고, 클래스A 안에는 y 정의 되어있지 않으므로 자바는 y가 정의되어있지 않다고 생각
		   어떤 클래스를 인스턴스화 시킬 때, 인스턴스를 담는 변수의 데이터 타입은 본인(B) 또는 부모(A) 클래스

class A{
    public String x(){return "A.x";}    ->클래스 A의 x를 호출하면 A.x가 나온다
}
class B extends A{
    public String x(){return "B.x";}     ->클래스A의 메소드 x를 오버라이딩 하고 있다.(우선순위 더 높아짐)/클래스B의 메소드x를 호출하면 B.x가 니언디
    public String y(){return "y";}
}
public class Poly {
    public static void main(String[] args) {
	A obj = new B();                
	syso(obj.x());	->obj는 A 행세 하고 있지만, 오버라이딩 했기 때문에 클래스B의 x메소드 B.x를 출력한다.
	syso(obj.y());	->obj는 A행세 하고 있으므로 y는 출력되지 않는다.

public static void execute(Calculator cal){       ->
	syso("실행결과");
	cal.run();
}
public static void main ...{
	Calculator c1=new CalPlus();         ->부모메소드를 데이터타입으로 정해서 부모 메소드의 run을 실행시킬 수 있다.
	c1.setOprands(10,20);
	Calculator c2=new CalMinus();       ->서로 다른 데이터타입(Plus/Minus)이어도 부모의 데이터타입을 이용해서 run을 호출할 수 있다. 
	c2.setOprands(10,20);
	execute(c1);
	execute(c2);

O 인터페이스와 다형성
I obj = new C();    ->C라는 클래스를 인스턴스화 시키고 있는데, 인스턴스를 obj라는 변수에 담고 있고 이 obj 변수의 데이터타입은 I
	           ->C라는 클래스가 인터페이스 I를 구현(implements)하고 있다.  class C implements I{}	

interface I2
	public String A();
interface I3
	public String B();
class D implements I2, I3
	public String A()
	public String B()

D obj = new D();   ->클래스가 갖고있는 모든 기능을 사용할 때
I2 obj=new D();    ->클래스의 여러기능 중 인터페이스 I2의 기능만 사용할 때/String B의 기능을 감출 수 있음

반대로
인터페이스 I8 안에 클래스 A,B,C 가 있을 경우
각각의 클래스를 인스턴스화 시킬 때, 각각의 클래스가 공통적으로 구현하고 있는 인터페이스 I8을 데이터타입으로 해서
같은 데이터타입(I8)을 갖고 있지만 클래스가 무엇이냐에 따라서 다르게 동작할 수 있는 다형성을 구현할 수도 있다.

*예시
interface 아버지{}
interface 어머니{}
interface 프로그래머{  public void coding();   }
interface 종교인{}

class 스티브 implements 아버지,프로그래머,종교인{
	public void coding() { syso("fast");  }      }
class 레이첼 implements 어머니,프로그래머 {
	public void coding() {syso("elegance");  }  }

public class 회사
	public static void main ~~{
	 프로그래머 employee1 = new 스티브();    ->아버지 등의 정보는 필요 없으므로 프로그래머만 쓸 수 있도록 지정한다.
	 프로그래머 employee2 = new 레이첼();

	emplyee1.coding();   ->employee1에게 coding 요청  fast 나옴
	emplyee2.coding();   -> elegance 나옴

2023.02.06.월

O abstract : 문법
-abstract : abstract 클래스나 메소드를 사용하기 위해서는 반드시 상속해서 사용하도록 강제하는 것
-본체가 있는 메소드는 abstract 키워드를 가질 수 없다. abstract int c() {syso("hello")} -> X
-추상클래스 내에는 추상 메소드만 존재/추상메소드가 있다면 클래스도 반드시 추상클래스
-추상클래스 내에 본체가 있는 메소드 존재 가능

O abstract : 사용이유
-예) 매번 합계와 평균을 구해야 한다면 이 부분은 run으로 묶어놓고, 앞에 +나-를 붙이는 등 꾸미는 것(상황에 따라 달라지는 부분)은 사용자에게 위임
      달라지는 부분-추상메소드 사용
      공통된 부분-클래스로 정해둠
       class CalDeco(달라지는 부분) extands Cal(공통)  ->이런식으로 위임해서 
       public void sum() { syso("++ sum : "+~~) }   ->이렇게 바꿀 부분 입력("++sum : ")

O abstract : 디자인 패턴(그냥 참고)

O final
-상속/변경을 금지하는 규제
static final double PI = 3.14;   -->모든 인스턴스에서(static) 바뀌지않는(final) 값(PI라는 변수에 담겨있는 3.14)
Calculator.PI = 6;  -->에러 발생

-클래스/메소드에서 final (잘 안씀)
final class C {
    final void b () { }     }
class D extends C { }   ---->final을 상속하려고 하면 오류난다


	
